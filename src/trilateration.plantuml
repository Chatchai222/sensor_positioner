@startuml

class Anchor {
    - id: str 
    - pos: Position
    
    + Anchor(id: str, p: Position)
    + is_equal(): bool 
    + get_id(): str 
    + get_position(): Position 
    + set_position(p: Position): None
}
class Tag {
    - id: str
    - many_dist_to_anchor_and_anchor: list
    
    + Tag(id: str)
    + get_id(): str
    + get_many_dist_to_anchor_and_anchor(): list
    + upsert_dist_to_anchor_and_anchor(d: float, a: Anchor): None
    + get_position(): Position
}

class AnchorCollection {
    - many_anchor: list

    + AnchorCollection()
    + get_many_anchor(): list
    + insert_anchor_id_and_position(id: str, p: Position): None
    + update_anchor_position(id: str, p: Position): None
    + get_anchor(): str
}
class TagCollection {
    - many_tag: list

    + TagCollection()
    + get_many_tag(): list
    + insert_tag_by_id(id: str): None
    + get_tag(id: str): Tag
}

class Room {
    - anchor_collection: AnchorCollection
    - tag_collection: TagCollection
    - many_observer: list

    + Room()
    + populate_with_default_anchor_and_tag(): None
    + get_many_anchor(): list
    + upsert_anchor_position(id: str, a: Anchor): None
    + get_many_tag(): list
    + upsert_tag_to_anchor_dist(tag_id: str, anchor_id: str, d: float)
    + get_many_observer(): list
    + add_observer(o: RoomObserver): None
    + notify_observer(): None
}
class TagToJSONStringConverter {
    + TagToJSONStringConverter()
    + get_JSON(t: Tag): str
}

abstract class MessageBroker{
    + set_on_message_callback(c: callback): None
    + publish(m: message): None
}
class MockMessageBroker {
    - recent_publish: str
    - on_message_callback: callback

    + MockMessageBroker()
    + get_recent_publish(): str
    + get_on_message_callback(): callback
    + on_message(message: str): None
}
class RedisMessageBroker {
    + PUBLISHE_CHANNEL: str
    + SUBSCRIBE_CHANNEL: str
    
    + RedisMessageBroker(hostname: str, port: int, auth: str)
}

abstract class RoomObserver {
    + notify(r: Room): None
}
class TagPositionPublisher {
    - message_broker: MessageBroker
    - tag_to_string_converter: TagToJSONStringConverter
    - notify_count: int

    + TagPositionPublisher(in_message_broker)
    + get_notify_count(): int
    + get_message_broker(): MessageBroker
}
class MockRoomObserver {
    + get_notify_count(): int
}

class RoomRangeUpdater {
    - room: Room
    - message_broker: MessageBroker
    
    + RoomRangeUpdater(r: Room, mb: MessageBroker)
    + get_room(): Room
    + update_room(m: str): None
    + set_message_broker(mb: MessageBroker): None
    + get_message_broker(): MessageBroker
}


class Position {
    - ROUND_TO_NEAREST_DECIMAL_DIGIT: int

    Position(x: float, y: float, z: float)
}
class FarAxisOrigin2DPositionCalculator


class App


Tag -- FarAxisOrigin2DPositionCalculator
Tag -- Position

Anchor -- Position

AnchorCollection "1" *-- "many" Anchor
TagCollection "1" *-- "many" Tag

Room "1" *-- "1" AnchorCollection
Room "1" *-- "1" TagCollection

MessageBroker <|-- MockMessageBroker
MessageBroker <|-- RedisMessageBroker

RoomObserver <|-- TagPositionPublisher
RoomObserver <|-- MockRoomObserver

TagPositionPublisher *-- "1" MessageBroker
TagPositionPublisher *-- "1" TagToJSONStringConverter

RoomRangeUpdater *-- "1" MessageBroker
RoomRangeUpdater *-- "1" Room

App *-- "1" RoomRangeUpdater
App *-- "1" Room
App *-- "1" TagPositionPublisher








@enduml